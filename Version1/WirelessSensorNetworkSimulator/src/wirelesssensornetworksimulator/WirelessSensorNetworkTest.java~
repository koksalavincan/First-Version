/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package wirelesssensornetworksimulator;
import java.awt.*;
import java.awt.event.*;
import java.awt.event.ActionListener;
import java.util.Timer;
//import java.util.TimerTask;
//import javax.swing.ImageIcon;
import javax.swing.*;
import java.applet.*;


/**
 *
 * @author nikzad
 */
public class WirelessSensorNetworkTest extends Dialog{
    private JFrame picGraph;
    private Button btnOK;
    private Timer timerUpdate;
    private System.ComponentModel.Container components = null;
    private JTextArea txtStatus;
    WirelessSensorNetwork network;
    
    public WirelessSensorNetworkTest(WirelessSensorNetwork network) {
        InitializeComponent();
        this.network = network;
    }

    // This function comes from ActionEvent abstract interface which must be
    // overridden.
    public void actionPerformed(ActionEvent e) {
              //code that reacts to the action...
          }

    
/*    protected override void Dispose(boolean disposing)		{
        if (disposing) {
            if (components != null) {
                components.Dispose();
            }
        }
        base.Dispose( disposing );
    }
*/
    private void InitializeComponent()	{
        this.picGraph = new JFrame("Wireless Sensor Network Simulator");
        this.btnOK = new Button("OK");
        this.timerUpdate = new Timer();
        this.txtStatus = new JTextArea();
        ((System.ComponentModel.ISupportInitialize)(this.timerUpdate)).BeginInit();
        this.SuspendLayout();
        //
        // picGraph
        //
//        this.picGraph..BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
        //this.picGraph.getLocation(8,8); //.Location = new System.Drawing.Point(8, 8);
        this.picGraph.setName("picGraph");
        this.picGraph.setSize(280,96); //.Size = new System.Drawing.Size(280, 96);
        this.picGraph.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        //this.picGraph.TabIndex = 0;
        //this.picGraph.TabStop = false;
        this.picGraph.Paint += new System.Windows.Forms.PaintEventHandler(this.picGraph_Paint);
        //
        // btnOK
        //
        this.btnOK.setEnabled(false);
        this.btnOK.setLocation(213,112); //.Location = new System.Drawing.Point(213, 112);
        this.btnOK.setName("btnOk"); //.Name = "btnOK";
        //this.btnOK.TabIndex = 1;
        this.btnOK.addActionListener(this);
        //this.btnOK.Click = getAction.getSource(); //new ActionEvent();// System.EventHandler(this.btnOK_Click);
        
        //
        // timerUpdate
        //
        //this.timerUpdate.Enabled = true;
        this.timerUpdate.SynchronizingObject = this;
        this.timerUpdate.Elapsed += new System.Timers.ElapsedEventHandler(this.timerUpdate_Elapsed);
        //
        // txtStatus
        //
        this.txtStatus.setLocation(8,112); //.Location = new System.Drawing.Point(8, 112);
        this.txtStatus.setName("txtStatus");
        this.txtStatus.ReadOnly = true;
        this.txtStatus.setSize(200,20); //.Size = new System.Drawing.Size(200, 20);
        this.txtStatus.TabIndex = 2;
        this.txtStatus.setText("Status: Initiating endurance test");
        //
        // WirelessSensorNetworkTest
        //
        this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
        this.ClientSize = new System.Drawing.Size(292, 142);
        this.Controls.Add(this.txtStatus);
        this.Controls.Add(this.btnOK);
        this.Controls.Add(this.picGraph);
        this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.Fixed3D;
        this.Name = "WirelessSensorNetworkTest";
        this.Text = "Wireless Sensor Network Test";
        ((System.ComponentModel.ISupportInitialize)(this.timerUpdate)).EndInit();
        this.ResumeLayout(false);
    }

		private void btnOK_Click(object sender, System.EventArgs e) {
			Close();
		}


		private void picGraph_Paint(object sender, System.Windows.Forms.PaintEventArgs e) {
			Graphics g = e.Graphics;
			g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;
			// draw background
			g.FillRectangle(System.Drawing.Brushes.BlanchedAlmond, e.ClipRectangle);
			// calculate max value, so that we can scale appropriately
			int i, iMax = 0;
			for (i = 0; i < 100; i++)
				iMax = Math.Max(iMax, network.iTestResults[i]);
			// draw the graph
			for (i = 0; i < 100; i++) {
				int iHeight = (int) (picGraph.Height * network.iTestResults[i] / iMax);
				if (network.iTestResults[i] > 0)
					g.FillRectangle(Brushes.Blue, picGraph.Width * i / 100, picGraph.Height - iHeight, picGraph.Width * (i + 1) / 100 - picGraph.Width * i / 100, iHeight);
				else {  // we've reached the last updated value - break out of the loop
					txtStatus.Text = "Status: " + (i - 1) + " / 100";
					txtStatus.Refresh();
					break;
				}
			}
			if (i == 100) {  // we didn't break out of the loop above, so assume we're on the last test or simply finished - calculate and display results
				int iTotal = 0;
				for (i = 0; i < 100; i++)
					iTotal += network.iTestResults[i];
				iTotal /= 100;
				txtStatus.Text = "Status: Complete. Average steps: " + iTotal;
				txtStatus.Refresh();
			}
		}

		private void timerUpdate_Elapsed(object sender, System.Timers.ElapsedEventArgs e) {
			if ((network.bTesting == false)  && (btnOK.Enabled == false)) // testing is done - enable button
				btnOK.Enabled = true;
			picGraph.Refresh();
		}

		#endregion

}
