/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package wirelesssensornetworksimulator;

import java.util.ArrayList;
//import java.util.Vector;
import java.util.Random;
import java.util.Date;
import java.lang.Math;
/**
 *
 * @author nikzad
 */
public class WirelessSensorNetwork{
    // This class represents the entire wireless sensor network.
    // network data structures
    // <editor-fold defaultstate="collapsed" desc="Variables and initialization code">
    public ArrayList<WirelessSensor> aSensors;                                   // array of sensors (network nodes)
    public ArrayList aRadar;                                     // array of packets that have reached the radar
    public VectorList vectors;                                       // list of vectors
    // network characteristics
    public int iNetworkSize =10;				 // number of nodes in the network
    public static int iMaxEnergy = 1000;			 // the initial energy of every node
    public int iMaxX = 460;					 // max X dimension of the map (for randomly placing nodes)
    public int iMaxY = 300;					 // max Y dimension of the map (for randomly placing nodes)
    public int iDestinationX = 420;				 // the location of the "end zone" (data collection uplink)
    public int iSensorRadius = 10;												// the pixel radius of a sensor for detecting a vector
    public int iSensorDelay = 50;													// the duration of the delay between packets sent by a tripped sensor
    public int iTransmitterDelay = 50;										// the duration of the packet transmission
    public int iTransmissionRadius = 50;								// the maximum communications range of any network node
    public float fTransmissionCost = 0.01f;							// the percent energy cost of sending a packet across (x) pixels - scales with distance, to be realistic
    public int iReceiveCost = 1;														// the energy cost of receiving a packet of information
    public int iSensorCost = 1;														// the energy cost of a tripped sensor
    private boolean bDirectedRouting = false;							// specifies whether routing is directed or random
    public int iUpdateDelay = 0;														// the lifetime of directed routing information; i.e., how long the network waits before re-routing
    public double x1, x2, x3;																// the directed-routing network parameters
    // network simulation variables
    public boolean bRunningSimulation = false;						// specifies whether or not the visual simulation is running
    public boolean bPaint = false, bPainting = false;			// specifies whether or not the map should be painted, and whether or not it is currently being painted
    public boolean bAbort = false;														// sepcifies whether or not the simulation thread should be aborted
    public boolean bTesting = false;													// specifies whether or not endurance testing is occurring
    public int timeStart; //Date timeStart;               	// the amount of time the network has been running (solely useful for visual simulation)
    public int iLastUpdated = 0;														// a timer for updating routing information
    public int iProcessTime = 0;														// the number of cycles executed by the process (solely useful for endurance testing)
    public int iPacketsDelivered = 0;											// the number of packets delivered by the network
    public Thread tSimulation = null;	      // the simulation thread (set to NULL when no simulation is running)
    public Random r;	                      // a random number producer
    public int iSeed;																					// the last seed used (retained for the purpose of replaying a simulation, i.e., by re-seeding with this value)
    public int[] iTestResults;																// the results of each test (100-integer array)
    public boolean flag = true;
    // </editor-fold>

    class RunSimulationThread implements Runnable{
        // To run Thread
        public void run() {
            // This method is called when the thread runs
            RunSimulation();
        }
    }

    class RunTestThread implements Runnable{
        // To run Thread
        public void run() {
            // This method is called when the thread runs
            RunTest();
        }
    }

    public WirelessSensorNetwork(int iNetworkSize, int iSensorRadius, int iSensorDelay, int iTransmissionRadius, int iTransmitterDelay, float fTransmissionCost, int iReceiveCost, int iSensorCost, boolean bDirectedRouting, double x1, double x2, double x3, int iUpdateDelay, int iMaxX, int iMaxY, int iDestinationX)	{
        // this is, admittedly, a crude way to write a constructor - should be broken out into a network descriptor class - but hey, it works.
	this.iNetworkSize = iNetworkSize;
	this.iSensorRadius = iSensorRadius;
	this.iTransmissionRadius = iTransmissionRadius;
	this.iTransmitterDelay = iTransmitterDelay;
	this.iSensorDelay = iSensorDelay;
	this.fTransmissionCost = fTransmissionCost;
	this.iReceiveCost = iReceiveCost;
	this.iSensorCost = iSensorCost;
	this.bDirectedRouting = bDirectedRouting;
	this.iUpdateDelay = iUpdateDelay;
	this.iMaxX = iMaxX;
	this.iMaxY = iMaxY;
	this.iDestinationX = iDestinationX;
	this.x1 = x1;
        this.x2 = x2;
	this.x3 = x3;
	vectors = null;
	r = new Random((int) System.currentTimeMillis());   // build the network
	BuildNetwork();
	}

    public void BuildNetwork() {
	aSensors = new ArrayList();
	aRadar = new ArrayList();
        //int[] x = new int[20];
        int k = 0;
        // iNetworkSize = 20;
        int[] y = new int[20];
        // y = { 12, 10, 40, 60, 40, 80, 60, 245, 123, 56, 87, 98, 230, 75, 20, 78, 27, 67, 78 };
        int[] x = new int[20];
        for (k = 0; k < 20; k++) {
            x[k] = r.nextInt(iMaxX-10);
            y[k] = r.nextInt(iMaxY - 10);
        }
        while (aSensors.size() < iNetworkSize) {
            // first, add random sensors to the network (keep sorted by x, and make sure no other nodes with this x/y coordinate are in the list)
            while (aSensors.size() < iNetworkSize) {
                WirelessSensor sensor = new WirelessSensor(r.nextInt(iMaxX - 10) + 5, r.nextInt(iMaxY - 10) + 5, iSensorRadius);
                 //   k++;
                int i = 0;
                // add to list - note that it's sorted according to X coordinate; this provides an unambiguous metric for establishing routing connections (from nodes earlier in the list to nodes further down the list)
                for (; i < aSensors.size(); i++) {
                    if (((WirelessSensor) aSensors.get(i)).x > sensor.x) {
                        aSensors.add(i, sensor);
                        break;
                    }
                    if ((Math.abs(((WirelessSensor) aSensors.get(i)).x - sensor.x) < 14) && (Math.abs(((WirelessSensor) aSensors.get(i)).y - sensor.y) < 14))
                        break;
                }
                if (i == aSensors.size())  // not added to list - add at the end
                    aSensors.add(sensor);
            }
            // establish connections (wipe out all sensor connection grids)
            for (int i = 0; i < aSensors.size(); i++) {
                WirelessSensor iSensor = (WirelessSensor) aSensors.get(i);
                iSensor.aConnections = new ArrayList();
                if (iSensor.x > iDestinationX)
                    iSensor.aConnections.add(new WirelessSensorConnection(iSensor, null, (int) fTransmissionCost, 0, iTransmitterDelay));
                else {
                    for (int j = i + 1; j < aSensors.size(); j++) {
                        WirelessSensor jSensor = aSensors.get(j);
                        int iRadius = (int) Math.sqrt(Math.pow(iSensor.x - jSensor.x, 2) + Math.pow(iSensor.y - jSensor.y, 2));
                        if (iRadius <= iTransmissionRadius)
                            iSensor.aConnections.add(new WirelessSensorConnection(iSensor, jSensor, (int) (fTransmissionCost * iRadius /iTransmissionRadius), iReceiveCost, iTransmitterDelay));
                        }
                    }
                }
            // finally, weed out all sensors with no downstream connections that aren't in the destination zone
            // the trick here is to ensure that there aren't any dead spots in the network, i.e., clusters of nodes that are connected to each other but not to a node in the
            // data collector/uplink zone - we do this by removing all nodes that have no downstream connections and aren't in the uplink zone.
            ArrayList aRemoveSensors = new ArrayList();
            for (int i = aSensors.size() - 1; i >= 0; i--) {
                WirelessSensor sensor = aSensors.get(i);
                if ((sensor.x < iDestinationX) && (sensor.aConnections.isEmpty())) {  // dead end - eliminate.
                    aRemoveSensors.add(sensor);
                    // scan all upstream nodes, to see if they were connected to this removed node, and delete the connections
                    for (int j = i - 1; j >= 0; j--) {
                        WirelessSensor sensor2 = aSensors.get(j);
                        ArrayList aRemoveConnections = new ArrayList();
                        for (int i_temp = 0; i_temp < sensor2.aConnections.size(); i_temp++) {
                            WirelessSensorConnection connection = (WirelessSensorConnection)sensor2.aConnections.get(i_temp);
                            if (connection.sReceiver.equals(sensor))
                                aRemoveConnections.add(connection);
                        }
                        for (int i_temp = 0; i_temp < aRemoveConnections.size(); i_temp++) {
                            WirelessSensorConnection connection = (WirelessSensorConnection)aRemoveConnections.get(i_temp);
                            sensor2.aConnections.remove(connection);
                        }
                    }
                }
            }
            for (int i_temp=0; i_temp < aRemoveSensors.size(); i_temp++){
                WirelessSensor sensor = (WirelessSensor) aRemoveSensors.get(i_temp);
                aSensors.remove(sensor);
            }
        }
    }

    public void Reset(boolean bNewSeed) {
        // this function resets the network so that a new simulation can be run - can either be reset with a new seed, or with the previous seed (for replay.)
        this.iProcessTime = 0;
        this.iPacketsDelivered = 0;
        for (WirelessSensor sensor:aSensors) {
            sensor.iResidualEnergy = sensor.iInitialEnergy;
            sensor.aPackets = new ArrayList();
            sensor.iSensorRadius = iSensorRadius;
            sensor.iSensorDelay = 0;
            for (int i_temp = 0; i_temp < sensor.aConnections.size(); i_temp++) {
                WirelessSensorConnection connection = (WirelessSensorConnection) sensor.aConnections.get(i_temp);
                connection.iTransmitting = 0;
                connection.packet = null;
            }
        }
        aRadar = new ArrayList();
        if (bDirectedRouting == true)
            SetRoutingInformation();
        iLastUpdated = iUpdateDelay;
        if (bNewSeed == true)
            this.iSeed = (int) System.currentTimeMillis();
        r = new Random(iSeed);
    }

    public void RunSimulation() {
        // this function is the heart of the visual simulation thread. It runs until bAbort is set to true - this is a faster and cleaner stop mechanism than using thread.Abort().
        bAbort = false;
        bRunningSimulation = true;
        timeStart = (int) System.currentTimeMillis();  //.DateTime.Now;
        this.vectors = new VectorList(iMaxX, iMaxY, r);
        while(bAbort == false) {
            Process(true);
            try {
                this.tSimulation.sleep(20);
            } 
            catch (InterruptedException e) {
                System.out.print("Thraed can not sleep");
            }
            // System.Threading.Thread.Sleep(20);   ????????????
        }
        bRunningSimulation = false;
    }

    public void RunTest() {
        // this function runs the endurance test.
        bTesting = true;
        iTestResults = new int[100];
        bAbort = false;
        bRunningSimulation = true;
        timeStart = (int)System.currentTimeMillis(); //System.DateTime.Now;
        this.vectors = new VectorList(iMaxX, iMaxY, r);
        for (int i = 0; i < 100 && bAbort == false; i++) {
            Reset(true);
            while (Process(false) == true)
                iTestResults[i]++;
            
        }
        bRunningSimulation = false;
        bTesting = false;

    }

    public boolean Process(boolean bSleep) {
        // this is the core of a network simulation - all of the network processes for one step of the simulation occur here. returns a bool to indicate that the
        // network is alive (all nodes active) or dead (partitioned by one or more dead nodes.)
        boolean bNetworkLives = true;
        iProcessTime++;
        // update vectors (note use of mutex)
//        vectors.mutexVector.WaitOne();
        vectors.Update();
       	while (vectors.aVectors.size() < 3)
            vectors.AddVector();
//        vectors.mutexVector.ReleaseMutex();
        // update sensors (create a new packet if sensor is active and triggered by a vector)
        for (WirelessSensor sensor:aSensors) {
            if (sensor.iResidualEnergy > 0) {
                if (sensor.iSensorDelay > 0)
                    sensor.iSensorDelay--;
                else {
                    for (Vector vector :vectors.aVectors) {
                        if (Math.sqrt(Math.pow(vector.x - sensor.x, 2) + Math.pow(vector.y - sensor.y, 2)) < sensor.iSensorRadius) {
                            if (sensor.iResidualEnergy <= iSensorCost)  // sensing failed due to sensor cost - sensor is now dead
                                sensor.iResidualEnergy = 0;
                            else {  // create packet
                                sensor.iSensorDelay = iSensorDelay;
                                sensor.iResidualEnergy -= iSensorCost;
                                sensor.aPackets.add(new Packet(sensor.x, sensor.y, sensor.iSensorDelay));
                            }
                        }
                    }
                }
            }
            else
                bNetworkLives = false;
        }
        // start new transmisions for any pending packets
        for (WirelessSensor sensor:aSensors) {
            if (sensor.aPackets.size() > 0) {
                if (sensor.aConnections.size() > 0) {
                    if ((bDirectedRouting == true) && (sensor.connectionCurrent != null))
                        sensor.connectionCurrent.BeginTransmission();
                    else  // random routing
                        ((WirelessSensorConnection) sensor.aConnections.get(r.nextInt(sensor.aConnections.size()))).BeginTransmission() ;
            
                }
            }
        }
        // carry out transmissions across each connection
        for (WirelessSensor sensor:aSensors) {
            for (int i_temp = 0; i_temp < sensor.aConnections.size(); i_temp++){
                WirelessSensorConnection connection = (WirelessSensorConnection) sensor.aConnections.get(i_temp);
                Packet packet = connection.Transmit();
                if (packet != null) {
                    aRadar.add(packet);
                    iPacketsDelivered++;
                }
            }
        }
        // if using directed routing, update connection information
        if (bDirectedRouting == true) {
            if ((--iLastUpdated) <= 0) {
                iLastUpdated = iUpdateDelay;
                SetRoutingInformation();
            }
        }
        // note the end of the process - tell the map to paint itself, and sleep for 10ms if this is a timed simulation
        if (bPainting == false)
            bPaint = true;
        if (bSleep == true)
            try {
                this.tSimulation.sleep(10);
            }
            catch (InterruptedException e) {
                System.out.print("Thraed can not sleep");
            }
            //System.Threading.Thread.Sleep(10);   ?????
        return bNetworkLives;
    }

    public void SetRoutingInformation() {
        // this function updates directed-routing selections
        for (WirelessSensor sensor : aSensors) {
            if (sensor.iResidualEnergy > 0) {
                // choose best node given current conditions
                sensor.connectionCurrent = null;
                double dBestCost = 0;
                for (int i_temp = 0; i_temp < sensor.aConnections.size(); i_temp++) {
                    WirelessSensorConnection connection = (WirelessSensorConnection) sensor.aConnections.get(i_temp);
                    	if (connection.sReceiver == null) {  // if this is an uplink connection, always select it
                            sensor.connectionCurrent = connection;
                            break;
                        }
                        else if (connection.sReceiver.iResidualEnergy > 0) {
                            double dCost = Math.pow(connection.iTransmitCost, x1) * Math.pow(connection.sSender.iResidualEnergy, -x2) * Math.pow(connection.sSender.iInitialEnergy, x3) + Math.pow(connection.iReceiveCost,  x1) * Math.pow(connection.sReceiver.iResidualEnergy, -x2) * Math.pow(connection.sReceiver.iInitialEnergy, x3);
                            if ((sensor.connectionCurrent == null) || (dCost < dBestCost)) {
                                dBestCost = dCost;
                                sensor.connectionCurrent = connection;
                            }
                        }
                    }
                }
            }
        }

    // </editor-fold>
}
